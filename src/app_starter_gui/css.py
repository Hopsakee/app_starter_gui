# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_css.ipynb.

# %% auto 0
__all__ = ['generate_css', 'test_generate_css']

# %% ../nbs/01_css.ipynb 2
from operator import attrgetter
from itertools import groupby
from .core import Button
from fastcore.test import *  # for test_assert

# %% ../nbs/01_css.ipynb 4
def generate_css(buttons):
    """Generate CSS styling for buttons with image backgrounds
    
    Args:
        buttons: List of Button objects
    Returns:
        str: CSS styling with unique button IDs and hover effects
        
    Each button gets:
    - 230px height (180px image + 50px label)
    - Hover animation with lift effect
    - Image zoom on hover
    - Rounded corners
    """
    css_template = """
        #{btn_id} {{ 
            height: 230px;  /* Total height of button */
            width: 200px;
            border-radius: 15px;
            display: flex;
            flex-direction: column;
            padding: 0;
            margin: 0;
            overflow: hidden;
            transition: transform 0.2s, box-shadow 0.2s;
            background: none;
        }}
        
        #{btn_id}::before {{
            content: '';
            height: 180px;  /* Image height */
            width: 100%;
            background-size: cover;
            background-position: center center;
            background-repeat: no-repeat;
            background-image: url('{image_url}');
            transition: transform 0.2s;
            margin: 0;
            padding: 0;
            display: block;
            flex-shrink: 0;
            position: relative;
            top: 0;
            border-radius: 15px 15px 0 0;  /* Round top corners only */
        }}
        
        #{btn_id}:hover {{
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }}

        #{btn_id} > div {{
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
        }}

        #{btn_id}:hover::before {{
            transform: scale(1.05);
        }}
    """
    
    all_css = []
    
    # Sort buttons by app_type to match the dashboard layout
    buttons = sorted(buttons, key=attrgetter('app_type'))
    button_groups = {k: list(g) for k, g in groupby(buttons, key=attrgetter('app_type'))}
    
    for app_type, type_buttons in button_groups.items():
        for button_idx, button in enumerate(type_buttons, 1):
            btn_id = f"btn_{app_type}_{button_idx}"
            css = css_template.format(btn_id=btn_id, image_url=button.image_url)
            all_css.append(css)
    
    return "\n".join(all_css)

# %% ../nbs/01_css.ipynb 6
from fastcore.test import *

def test_generate_css():
    "Test CSS generation includes all app types"
    buttons = [
        Button("AI App", "img.jpg", "https://ai.com", "AI"),
        Button("Search", "img.jpg", "https://search.com", "Search")
    ]
    css = generate_css(buttons)
    test('#btn_ai_1', css.lower(), lambda x,y: x in y)
    test('#btn_search_1', css.lower(), lambda x,y: x in y)

test_generate_css()
